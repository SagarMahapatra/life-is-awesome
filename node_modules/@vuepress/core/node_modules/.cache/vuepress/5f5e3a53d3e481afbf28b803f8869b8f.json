{"remainingRequest":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sagarmahapatra/personal/website/pallavibl/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/sagarmahapatra/personal/website/pallavibl/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/sagarmahapatra/personal/website/pallavibl/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/sagarmahapatra/personal/website/pallavibl/docs/_posts/2020-4-15-our-yoga-routine.md?vue&type=template&id=348ac73e&","dependencies":[{"path":"/Users/sagarmahapatra/personal/website/pallavibl/docs/_posts/2020-4-15-our-yoga-routine.md","mtime":1588315587533},{"path":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sagarmahapatra/personal/website/pallavibl/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}